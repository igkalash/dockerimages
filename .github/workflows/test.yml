name: on_push_and_pull

on:
  push:
  
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        
    - name: Lint code
      run: flake8

  push_to_registry:
    name: Push docker image to docker hub
    runs-on: ubuntu-latest
    
    steps:
      - name: check out the repo
        uses: actions/checkout@v2

      - name: login to Docker hub
        uses: docker/login-action@v2         
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Cheking if tag exists
        if: startsWith(github.ref, 'refs/tags/test')
        uses: docker/build-push-action@v4 
        
        with:
                 
          push: true
          tags: turbotroll/homework:${{github.ref_name}}
      

      - name: sha short
        run: | 
         echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV   
         echo "REF_NAME=`echo ${GITHUB_REF_NAME} |  tr '/' '_'`" >> $GITHUB_ENV   
        
      - name: Build and push docker image with tag
        uses: docker/build-push-action@v4 
        if: startsWith(github.ref, 'refs/tags/test')
        with:       
          push: true
          tags: turbotroll/homework:${{github.ref_name}}
       
      - name: Build and push docker image with no tag
        uses: docker/build-push-action@v4 
        with:       
          push: true
          tags: turbotroll/homework:${{ env.REF_NAME}}-${{env.SHORT_SHA}}

      
    
  
  compose_up:
      name: comose up on a remote server
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - uses: webfactory/ssh-agent@v0.8.0
          with:
            ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        - name: sshin
          run: |
            docker context create homework --description "remote connection to ec2" --docker "host=ssh://ubuntu@54.241.232.171"
            docker context use homework
            docker-compose up -d
      